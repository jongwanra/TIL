#include <stdio.h>
#include <string.h>
#include <stdlib.h>


//이진 트리를 표현한 구조체
typedef struct bTreeNode{
    struct bTreeNode *left;
    int id;
    int data;
    struct bTreeNode *right;
    
}BTreeNode;

BTreeNode * MakeBTreeNode(int id_cnt);
void SetData(BTreeNode * bt, int data);

void MakeLeftSubTree(BTreeNode * main, BTreeNode * sub );
void MakeRightSubTree(BTreeNode * main, BTreeNode * sub );
void InorderTraverse(BTreeNode *bt);
void PreorderTraverse(BTreeNode *bt);
void PostorderTraverse(BTreeNode *bt);
BTreeNode * getAddress(BTreeNode *bt, int id);

int main(void){
    int type = 0;
    int id = 0;
    int id_cnt = 0;
    BTreeNode *tree = NULL;
    
    BTreeNode * f1 = MakeBTreeNode(++id_cnt); // Create Node f1
    BTreeNode * f2= MakeBTreeNode(++id_cnt); // Create Node f2
    BTreeNode * f3 = MakeBTreeNode(++id_cnt); // Create Node f3
    BTreeNode * f4 = MakeBTreeNode(++id_cnt); // Create Node f4
    BTreeNode * f5 = MakeBTreeNode(++id_cnt); // Create Node f5
    BTreeNode * f6 = MakeBTreeNode(++id_cnt); // Create Node f6
    BTreeNode * f7 = MakeBTreeNode(++id_cnt); // Create Node f7
    BTreeNode * f8 = MakeBTreeNode(++id_cnt); // Create Node f8
    
    //tree 가 f1을 가리키게 함
    tree = f1;
    
    //각 노드에 데이터 저장
    SetData(f1, 20);
    SetData(f2, 30);
    SetData(f3, 50);
    SetData(f4, 70);
    SetData(f5, 90);
    SetData(f6, 120);
    SetData(f7, 130);
    SetData(f8, 80);
    
    //f1 node 왼쪽에 f2, 오른쪽에  f3 연결
    MakeLeftSubTree(f1, f2);
    MakeRightSubTree(f1, f3);
    
    //f2 node 왼쪽에 f4, 오른쪽에  f5 연결
    MakeLeftSubTree(f2, f4);
    MakeRightSubTree(f2, f5);
    
    //f3 node 오른쪽에 f6 연결
    MakeRightSubTree(f3, f6);
    
    //f6 node 왼쪽에 f7, 오른쪽에  f8 연결
    MakeLeftSubTree(f6, f7);
    MakeRightSubTree(f6, f8);
    
    scanf("%d %d", &type, &id);
    //id가 범위를 벗어난 경우엔 -1 출력
    if(id >= 9 || id < 1){
        printf("-1");
        return 0;
    }
    switch (type) {
            //선위 순회
        case 1:
            PreorderTraverse(getAddress(tree, id));
            break;
            //중위 순회
        case 2:
            InorderTraverse(getAddress(tree, id));
            break;
            //후위 순회
        case 3:
            PostorderTraverse(getAddress(tree, id));
            break;
            
    }
    
    
    return 0;
}

//노드 생성 함수
BTreeNode * MakeBTreeNode(int id_cnt){
    BTreeNode * nd = (BTreeNode *)malloc(sizeof(BTreeNode));
    nd->left = NULL;
    nd->id = id_cnt;
    nd->right = NULL;
    
    return nd;
}


//Data 대입 함수
void SetData(BTreeNode * bt, int data){
    bt->data = data;
}

//왼쪽 자식으로 연결시키는 함수
void MakeLeftSubTree(BTreeNode * main, BTreeNode * sub ){
    if(main ->left != NULL)
        free(main->left);
    
    main->left = sub;
}


//오른쪽 자식으로 연결시키는 함수
void MakeRightSubTree(BTreeNode * main, BTreeNode * sub ){
    if(main ->right != NULL)
        free(main->right);
    
    main->right = sub;
}

//해당 root Node 주소 가져오기
BTreeNode * getAddress(BTreeNode *bt, int id){
    if(id == 1)
        return bt;
    else if(id == 2)
        return bt->left;
    else if(id == 3)
        return bt->right;
    else if(id == 4)
        return bt->left->left;
    else if(id == 5)
        return bt->left->right;
    else if(id == 6)
        return bt->right->right;
    else if(id == 7)
        return bt->right->right->left;
    else if(id == 8)
        return bt->right->right->right;
    
    return NULL;
}

//중위 순회
void InorderTraverse(BTreeNode *bt){
    if(bt == NULL)
        return;
    InorderTraverse(bt->left);
    printf(" %d", bt->data);
    InorderTraverse(bt->right);
    
}
//선위 순회
void PreorderTraverse(BTreeNode *bt){
    if(bt == NULL)
        return;
    printf(" %d", bt->data);
    PreorderTraverse(bt->left);
    PreorderTraverse(bt->right);
}

//후위 순회
void PostorderTraverse(BTreeNode *bt){
    if(bt == NULL)
        return;
    PostorderTraverse(bt->left);
    PostorderTraverse(bt->right);
    printf(" %d\n", bt->data);
}


