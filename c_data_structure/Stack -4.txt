#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct Stack{
    int top;
    int sign;
}asd;

void push(char *stack, char value, asd* st);
char pop(char *stack, asd* st);
int operand(char *in, int i, asd* st);

int main(){
    
    int N = 0, number = 0;
    char *in = NULL;
    char tmp[100], out[100], stack[100];
    
    asd st;
    
    scanf("%d", &N);
    getchar();
    
    for (int i = 0; i < N; i++){
        number = 0;
        st.top = -1;
        st.sign = 0;
        
        for (int j = 0; j < 100; j++){
            out[j] = '\0';
            stack[j] = '\0';
        }
        
        scanf("%s", tmp);
        getchar();
        
        in = malloc(sizeof(char) * ((int)strlen(tmp) + 1));
        strcpy(in, tmp);
        
        for(int j = 0; j < (int)strlen(in); j++){
            
            if (in[j] == '(')
                push(stack, in[j], &st);
            
            else if (in[j] == ')'){
                while (stack[st.top] != '(')
                    out[number++] = pop(stack, &st);
                pop(stack, &st);
            }
            
            else if (operand(in, j, &st) == 6)
                push(stack, in[j], &st);
            
            else if (operand(in, j, &st) == 0)
                out[number++] = in[j];
            
            else{
                if (st.sign == 1)
                    out[number++] = pop(stack, &st);
                else{
                    while ((st.top != -1) && (operand(in, j, &st) <= operand(stack,st.top, &st)))
                        out[number++] = pop(stack, &st);
                }
                if ((operand(in,j, &st) == 1) || (operand(in, j, &st) == 2))
                    push(stack, in[j++], &st);
                push(stack, in[j], &st);
            }
        }
        while (st.top != -1)
            out[number++] = pop(stack, &st);
        printf("%s\n", out);
    }
    
    free(in);
    return 0;
}

void push(char *stack, char value, asd *st) {
    stack[++(st->top)] = value;
}

char pop(char *stack, asd* st) {
    return stack[(st->top)--];
}

int operand(char *in, int i, asd *st){
    if ((st->top != i) && (i == 0) && ((in[i] == '+') || (in[i] == '-'))){
        st->sign = 1;
        return 6;
    }
    else if((st->top != -1) && ((in[i] == '+') || (in[i] == '-')) && ((in[i - 1] == '|')    || (in[i - 1] == '&') || (in[i - 1] == '<')|| (in[i - 1] == '>')                    || (in[i - 1] == '-') || (in[i - 1] == '+') || (in[i - 1] == '*')                   || (in[i - 1] == '/') || (in[i - 1] == '!')))
        return 6;
    
    else if (in[i] == '|')
        return 1;
    else if (in[i] == '&')
        return 2;
    else if (in[i] == '>' || in[i] == '<')
        return 3;
    else if (in[i] == '+' || in[i] == '-')
        return 4;
    
    else if (in[i] == '*' || in[i] == '/')
        return 5;
    else if (in[i] == '!')
        return 6;
    else
        return 0;
}
